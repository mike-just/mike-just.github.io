<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>顾沉舟的个人博客</title>
    <link>https://mike-just.github.io/</link>
    <description>Recent content on 顾沉舟的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jul 2020 09:42:44 +0800</lastBuildDate>
    
	<atom:link href="https://mike-just.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Blog1</title>
      <link>https://mike-just.github.io/post/blog1/</link>
      <pubDate>Sun, 12 Jul 2020 09:42:44 +0800</pubDate>
      
      <guid>https://mike-just.github.io/post/blog1/</guid>
      <description>Spring&amp;mdash;-AOP(面向切面编程)&amp;mdash;声明式事务&amp;mdash;-Spring-JDBCTemplate Spring&amp;mdash;-IOC(容器)&amp;mdash;&amp;ndash;整合mybais等框架的
IOC：(Inversion(反转) of . Control) ：控制反转 控制资源的获取方式: 主动式：(要什么资源都自己创建即可) BookServlet{ BookServlet bs=new BookServlet(); AirPlane ap=new AirPlane();//复杂对象的创建是比较困难的 } 被动式：(资源的获取不是我们创建，交给容器来创建) BookServlet{ BookService bs; public void test01(){ bs.checkout(); } } 容器：管理所有的组件(有功能的类)；假设，BookServlet受容器管理，BookService也受容器管理，容器可以自动的探查出哪些组件(类) 需要用到另一些组件(类)；容器帮我们创建BookService对象，并把BookService赋值进去
DI：(Dependency Injection)依赖注入 容器能知道哪个组件(类)运行的时候，需要另外一个类(组件)，容器通过反射的形式，将容器中准备好的BookService对象注入(利用反射 给属性赋值)到BookServlet中；
只要是容器管理的组件，都能使用容器提供的强大功能
HelloWord;（通过各种方式给容器中注册对象(注册会员)） 以前是自己new对象，现在所有的对象交给容器创建;给容器中注册组件</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://mike-just.github.io/post/blog/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:31 +0800</pubDate>
      
      <guid>https://mike-just.github.io/post/blog/</guid>
      <description>@@Autowired注解：
先按照类型去容器中找到对应的组件 @Autowired private BookDao bookDao;
 找到就直接赋值 没找到就报错 先按照类型来找。。。。 找到多个类型一样的呢？按照变量名(bookDao)作为id继续匹配 那如果变量名有一样的呢？报错。可以使用@Qualifier(&amp;quot;haha&amp;quot;)指定一个字符串作为新的id 那如果@Qualifier也找不到呢？@Autowired(required=false)表示找不到就自动装配null  如果@Autowired作用在方法上呢？ @Controller public class BookServlet { //1.这个方法也会在bean创建的时候自动运行 //2.这个方法的每一个参数都会自动注入值 @Autowired public void haha(BookDao dao,BookService bookService){ System.out.println(&amp;ldquo;Spring运行了这个方法。。。&amp;ldquo;+dao+bookService); }
总结：@Autowired 、@Resource、@Inject;都是自动装配的意思 @Autowired :最强大：Spring的注解 @Resource：默认byname java的标准
@Resource的扩展性强，如果我们切换成另外一个容器框架，@Resource还是可以使用的，@Autowired就不行了 </description>
    </item>
    
  </channel>
</rss>